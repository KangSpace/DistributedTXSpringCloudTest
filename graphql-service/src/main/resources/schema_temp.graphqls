# 对象类型
type Character1 {
    name: String!
    appearsIn: [Episode!]!
}

# 参数（Arguments）
# GraphQL 对象类型上的每一个字段都可能有零个或者多个参数，例如下面的 length 字段：
type Starship {
    id: ID!
    name: String!
    length(unit: LengthUnit = METER): Float
}

enum LengthUnit {
    METER
}

# 标量类型（Scalar Types）
# GraphQL 自带一组默认标量类型：
#
# Int：有符号 32 位整数。
# Float：有符号双精度浮点值。
# String：UTF‐8 字符序列。
# Boolean：true 或者 false。
# ID：ID 标量类型表示一个唯一标识符，通常用以重新获取对象或者作为缓存中的键。ID 类型使用和 String 一样的方式序列化；然而将其定义为 ID 意味着并不需要人类可读型。
# 自定义标量
scalar Date

# 枚举
# 枚举类型是一种特殊的标量，它限制在一个特殊的可选值集合内。这让你能够：
# 1.验证这个类型的任何参数是可选值的的某一个
# 2.与类型系统沟通，一个字段总是一个有限值集合的其中一个值。
enum Episode {
    NEWHOPE
    EMPIRE
    JEDI
}

# 接口
# 一个接口是一个抽象类型，它包含某些字段，而对象类型必须包含这些字段，才能算实现了这个接口。
interface Character {
    id: ID!
    name: String!
    friends: [Character]
    appearsIn: [Episode]!
}
type Human implements Character {
    id: ID!
    name: String!
    friends: [Character]
    appearsIn: [Episode]!
    starships: [Starship]
    totalCredits: Int
}
type Droid implements Character {
    id: ID!
    name: String!
    friends: [Character]
    appearsIn: [Episode]!
    primaryFunction: String
}
# 联合类型（Union Types）
# 联合类型和接口十分相似，但是它并不指定类型之间的任何共同字段。
union SearchResult = Human | Droid | Starship

# 输入类型（Input Types）
# 目前为止，我们只讨论过将例如枚举和字符串等标量值作为参数传递给字段，但是你也能很容易地传递复杂对象。这在变更（mutation）中特别有用，因为有时候你需要传递一整个对象作为新建对象。在 GraphQL schema language 中，输入对象看上去和常规对象一模一样，除了关键字是 input 而不是 type：
input ReviewInput {
    stars: Int!
    commentary: String
}

#如:
#mutation CreateReviewForEpisode($ep: Episode!, $review: ReviewInput!) {
#  createReview(episode: $ep, review: $review) {
#    stars
#    commentary
#  }
#}
#variables
#{
#  "ep": "JEDI",
#  "review": {
#    "stars": 5,
#    "commentary": "This is a great movie!"
#  }
#}



# 实例
type Author{
    id: Int!
    name: String!
    age: Int
}

type Book {
    id: Int!
    name: String!
    author: Author!
    publisher: String!
}

# input 输入类型传参对象
input InputAuthor {
    id: Int!
    name: String!
    age: Int
}
input InputBook {
    id: Int!
    name: String!
    author: InputAuthor!
    publisher: String!
}